version: 2.1

description: |
  Builds and pushes docker images using https://github.com/CircleCI-Public/aws-eks-orb
  Updates deployments on EKS clusters (e.g. qa/staging) that should always run on the latest image.
  EKS cluster might be managed via CD tools, e.g. argocd.
  Support AWS Organization setups with multiple AWS accounts and EKS clusters by sts assume-role
  Source code: https://github.com/signavio/circleci-aws-ecr-eks-orb

orbs:
  aws-ecr: circleci/aws-ecr@9.3.7
  aws-cli: circleci/aws-cli@4.1.2

executors:
  default:
    description: |
      Container to run the steps.
    parameters:
      image:
        type: string
        default: ubuntu-2204:current
    machine:
      image: <<parameters.image>>

jobs:
  build-push:
    description: >
      Uses circleci/aws-ecr to build and publish the docker images.
    executor: <<parameters.executor>>
    environment:
      DOCKER_BUILDKIT: "1"
      ECR_ROLE_NAME: << parameters.ecr_role_name >>
      ECR_ACCOUNT_ID: << parameters.ecr_account_id >>
    parameters: &build-push-parameters
      executor:
        description: executor to use for this job
        type: executor
        default: default
      repo:
        description: The ecr repo to push the docker images.
        type: string
      tag:
        description: |
          The docker images tag to be applied.
          (defaults to latest,${CIRCLE_SHA1})
        type: string
        default: "latest,${CIRCLE_SHA1}"
      dockerfile:
        description: Dockerfile name
        type: string
        default: Dockerfile
      path:
        description: Path to the directory containing your Dockerfile.
        type: string
        default: .
      build_path:
        description: Path to the directory containing your build context.
        type: string
        default: .
      extra_build_args:
        description: Additional arguments to pass to the Docker build step
        type: string
        default: ""
      attach_workspace:
        type: boolean
        default: true
        description: >
          Boolean for whether or not to attach to an existing workspace. Default
          is true.
      workspace_root:
        type: string
        default: "."
        description: >
          Workspace root path that is either an absolute path or a path relative
          to the working directory. Defaults to '.' (the working directory)
      platform:
        type: string
        default: "linux/amd64"
        description: >
          String to specify the architecture of the base image
      assume_role_with_web_identity_enabled:
        description: flag to enable/disable oidc
        type: boolean
        default: false
      ecr_account_id:
          description: Env var of ECR account ID
          type: env_var_name
          default: ECR_ACCOUNT_ID_PROD
      ecr_role_name:
          description: Env var of ECR role name
          type: env_var_name
          default: ECR_ACCOUNT_ID_PROD
    machine:
      image: ubuntu-2204:current
    steps:
      - when: # OIDC
          condition: << parameters.assume_role_with_web_identity_enabled >>
          steps:
            - run:
                name: Assume Role with Web Identity - OIDC Session
                command: |
                  echo "Establishing the OIDC session with account...${DEPLOYMENT_ACCOUNT_ID}..and the Role ${OIDC_ROLE}"
                  temp_role=$(aws sts assume-role-with-web-identity --role-arn "arn:aws:iam::${DEPLOYMENT_ACCOUNT_ID}:role/${OIDC_ROLE}" --role-session-name "web-identity-role-session" --web-identity-token "${CIRCLE_OIDC_TOKEN}")
                  key_id=$(echo "${temp_role}" | jq .Credentials.AccessKeyId | xargs)
                  access_key=$(echo "${temp_role}" | jq .Credentials.SecretAccessKey | xargs)
                  session_token=$(echo "${temp_role}" | jq .Credentials.SessionToken | xargs)
                  echo "export AWS_ACCESS_KEY_ID=${key_id}" >> $BASH_ENV
                  echo "export AWS_SECRET_ACCESS_KEY=${access_key}" >> $BASH_ENV
                  echo "export AWS_SESSION_TOKEN=${session_token}" >> $BASH_ENV
                  source $BASH_ENV
                  echo "OIDC session established"
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-cli/setup:
                profile_name: global_res
      - when: # OIDC
          condition:
            equal:
              [true, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-cli/setup:
                profile_name: oidc
      - when: # OIDC
          condition: << parameters.assume_role_with_web_identity_enabled >>
          steps:
            - run:
                name: ECR Account Login - Cross Account Session
                command: |
                  echo "Establishing a cross account session with ECR account..."
                  AWS_ACCESS_KEY_ID="$(echo "$AWS_ACCESS_KEY_ID" | circleci env subst)"
                  AWS_SECRET_ACCESS_KEY="$(echo "$AWS_SECRET_ACCESS_KEY" | circleci env subst)"
                  AWS_SESSION_TOKEN="$(echo "$AWS_SESSION_TOKEN" | circleci env subst)"
                  AWS_REGION="$(echo "$AWS_REGION" | circleci env subst)"
                  aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}" --profile "oidc"
                  aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}" --profile "oidc"
                  aws configure set aws_session_token "${AWS_SESSION_TOKEN}" --profile "oidc"
                  aws configure set region "${AWS_REGION}" --profile "oidc"
                  tokenResponse=$(aws sts assume-role \
                  --role-arn arn:aws:iam::${!ECR_ACCOUNT_ID}:role/${!ECR_ROLE_NAME} \
                  --role-session-name AWSCLI-Session-cross --profile "oidc" --debug)
                  echo $tokenResponse
                  key_id=$(echo "${tokenResponse}" | jq .Credentials.AccessKeyId | xargs)
                  access_key=$(echo "${tokenResponse}" | jq .Credentials.SecretAccessKey | xargs)
                  session_token=$(echo "${tokenResponse}" | jq .Credentials.SessionToken | xargs)
                  aws configure set aws_access_key_id "${key_id}" --profile "crosssession"
                  aws configure set aws_secret_access_key "${access_key}" --profile "crosssession"
                  aws configure set aws_session_token "${session_token}" --profile "crosssession"
                  aws configure set region "${AWS_REGION}" --profile "crosssession"
                  echo "export AWS_ACCESS_KEY_ID=${key_id}" >> $BASH_ENV
                  echo "export AWS_SECRET_ACCESS_KEY=${access_key}" >> $BASH_ENV
                  echo "export AWS_SESSION_TOKEN=${session_token}" >> $BASH_ENV
                  source $BASH_ENV
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-ecr/ecr_login:
                profile_name: global_res
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-ecr/build_and_push_image:
                attach_workspace: <<parameters.attach_workspace>>
                workspace_root: <<parameters.workspace_root>>
                auth:
                  - aws-cli/setup:
                      profile_name: global_res
                profile_name: global_res
                repo: <<parameters.repo>>
                path: <<parameters.path>>
                build_path: <<parameters.build_path>>
                tag: <<parameters.tag>>
                dockerfile: <<parameters.dockerfile>>
                extra_build_args: <<parameters.extra_build_args>>
                platform: <<parameters.platform>>
      - when: # OIDC
          condition:
            equal:
              [true, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-ecr/build_and_push_image:
                account_id: ${!ECR_ACCOUNT_ID}
                attach_workspace: <<parameters.attach_workspace>>
                workspace_root: <<parameters.workspace_root>>
                auth:
                  - aws-cli/setup:
                      profile_name: crosssession
                      role_session_name: AWSCLI-Session-cross
                profile_name: crosssession
                repo: <<parameters.repo>>
                path: <<parameters.path>>
                build_path: <<parameters.build_path>>
                tag: <<parameters.tag>>
                dockerfile: <<parameters.dockerfile>>
                extra_build_args: <<parameters.extra_build_args>>
                platform: <<parameters.platform>>
  #-----
  build-push-restart:
    description: >
      Uses circleci/aws-ecr to build and publish the docker images.
      Runs kubectl rollout restart deployment/NAME afterwards to refresh the latest tag on cluster.
    executor: <<parameters.executor>>
    environment:
      DOCKER_BUILDKIT: "1"
      ECR_ROLE_NAME: << parameters.ecr_role_name >>
      ECR_ACCOUNT_ID: << parameters.ecr_account_id >>
    parameters:
      <<: *build-push-parameters
      eks_account_id:
        description: |
          Env var of the account id of the EKS cluster containing the deployment
          (default EKS_ACCOUNT_ID)
        type: env_var_name
        default: EKS_ACCOUNT_ID
      role_in_target_account:
        description: |
          Env var of the name of the role to be assumed to update the kubeconfig
          (defaults to ASSUME_ROLE)
        type: env_var_name
        default: ASSUME_ROLE
      aws_region:
        description: |
          Env var of AWS region to operate in
          (defaults to AWS_REGION)
        type: env_var_name
        default: AWS_REGION
      eks_cluster_name:
        description: |
          Env var of EKS cluster name
          (defaults to EKS_NAME)
        type: env_var_name
        default: EKS_NAME
      deployment_name:
        description: Name of the deployment to restart
        type: string
      additional_deployment_name:
        description: Name of the additional deployment to restarts (separated by comma)
        type: string
        default: ""
      k8s_namespace:
        description: Kubernetes namespace the deployment is located in
        type: string
      target_role:
        description: roll to be used for the cross account ecr connection
        type: string
        default: ""
      default_region:
        description: default deployment region
        type: string
        default: "eu-central-1"
      assume_role_with_web_identity_enabled:
        description: flag to enable/disable oidc
        type: boolean
        default: false
      ecr_account_id:
          description: Env var of ECR account ID
          type: env_var_name
          default: ECR_ACCOUNT_ID_PROD
      ecr_role_name:
          description: Env var of ECR role name
          type: env_var_name
          default: ECR_ACCOUNT_ID_PROD
    machine:
      image: ubuntu-2204:current
    steps:
      - when: # OIDC
          condition: << parameters.assume_role_with_web_identity_enabled >>
          steps:
            - run:
                name: Assume Role with Web Identity - OIDC Session
                command: |
                  echo "Establishing the OIDC session with account...${DEPLOYMENT_ACCOUNT_ID}..and the Role ${OIDC_ROLE}"
                  temp_role=$(aws sts assume-role-with-web-identity --role-arn "arn:aws:iam::${DEPLOYMENT_ACCOUNT_ID}:role/${OIDC_ROLE}" --role-session-name "web-identity-role-session" --web-identity-token "${CIRCLE_OIDC_TOKEN}")
                  AWS_ACCESS_KEY_ID=$(echo "${temp_role}" | jq .Credentials.AccessKeyId | xargs)
                  AWS_SECRET_ACCESS_KEY=$(echo "${temp_role}" | jq .Credentials.SecretAccessKey | xargs)
                  AWS_SESSION_TOKEN=$(echo "${temp_role}" | jq .Credentials.SessionToken | xargs)
                  AWS_REGION="$(echo "$AWS_REGION" | circleci env subst)"
                  aws configure set AWS_ACCESS_KEY_ID "${AWS_ACCESS_KEY_ID}" --profile "oidcsession"
                  aws configure set AWS_SECRET_ACCESS_KEY "${AWS_SECRET_ACCESS_KEY}" --profile "oidcsession"
                  aws configure set AWS_SESSION_TOKEN "${AWS_SESSION_TOKEN}" --profile "oidcsession"
                  aws configure set region "${AWS_REGION}" --profile "oidcsession"
                  echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
                  echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
                  echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
                  source $BASH_ENV
                  echo "OIDC session established"
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-cli/setup:
                profile_name: global_res
      - when: # OIDC
          condition:
            equal:
              [true, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-cli/setup:
                profile_name: oidcsession
      - when: # OIDC
          condition: << parameters.assume_role_with_web_identity_enabled >>
          steps:
            - run:
                name: ECR Account Login - Cross Account Session
                command: |
                  echo "Establishing a cross account session with ECR account..."
                  AWS_ACCESS_KEY_ID="$(echo "$AWS_ACCESS_KEY_ID" | circleci env subst)"
                  AWS_SECRET_ACCESS_KEY="$(echo "$AWS_SECRET_ACCESS_KEY" | circleci env subst)"
                  AWS_SESSION_TOKEN="$(echo "$AWS_SESSION_TOKEN" | circleci env subst)"
                  AWS_REGION="$(echo "$AWS_REGION" | circleci env subst)"
                  aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}" --profile "ecr"
                  aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}" --profile "ecr"
                  aws configure set aws_session_token "${AWS_SESSION_TOKEN}" --profile "ecr"
                  aws configure set region "${AWS_REGION}" --profile "ecr"
                  tokenResponse=$(aws sts assume-role \
                  --role-arn arn:aws:iam::${!ECR_ACCOUNT_ID}:role/${!ECR_ROLE_NAME} \
                  --role-session-name AWSCLI-Session-cross --profile "ecr" --debug)
                  echo $tokenResponse
                  key_id=$(echo "${tokenResponse}" | jq .Credentials.AccessKeyId | xargs)
                  access_key=$(echo "${tokenResponse}" | jq .Credentials.SecretAccessKey | xargs)
                  session_token=$(echo "${tokenResponse}" | jq .Credentials.SessionToken | xargs)
                  aws configure set aws_access_key_id "${key_id}" --profile "crosssession"
                  aws configure set aws_secret_access_key "${access_key}" --profile "crosssession"
                  aws configure set aws_session_token "${session_token}" --profile "crosssession"
                  aws configure set region "${AWS_REGION}" --profile "crosssession"
                  echo "export AWS_ACCESS_KEY_ID=${key_id}" >> $BASH_ENV
                  echo "export AWS_SECRET_ACCESS_KEY=${access_key}" >> $BASH_ENV
                  echo "export AWS_SESSION_TOKEN=${session_token}" >> $BASH_ENV
                  source $BASH_ENV
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-ecr/ecr_login:
                profile_name: global_res
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-ecr/build_and_push_image:
                attach_workspace: <<parameters.attach_workspace>>
                workspace_root: <<parameters.workspace_root>>
                auth:
                  - aws-cli/setup:
                      profile_name: global_res
                profile_name: global_res
                repo: <<parameters.repo>>
                path: <<parameters.path>>
                build_path: <<parameters.build_path>>
                tag: <<parameters.tag>>
                dockerfile: <<parameters.dockerfile>>
                extra_build_args: <<parameters.extra_build_args>>
                platform: <<parameters.platform>>
      - when: # OIDC
          condition:
            equal:
              [true, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - aws-ecr/build_and_push_image:
                account_id: ${!ECR_ACCOUNT_ID}
                attach_workspace: <<parameters.attach_workspace>>
                workspace_root: <<parameters.workspace_root>>
                auth:
                  - aws-cli/setup:
                      profile_name: crosssession
                      role_session_name: AWSCLI-Session-cross
                profile_name: crosssession
                repo: <<parameters.repo>>
                path: <<parameters.path>>
                build_path: <<parameters.build_path>>
                tag: <<parameters.tag>>
                dockerfile: <<parameters.dockerfile>>
                extra_build_args: <<parameters.extra_build_args>>
                platform: <<parameters.platform>>
      - run:
          name: "Install tools"
          command: |
            # sudo wget -O kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl
            sudo wget -O kubectl https://storage.googleapis.com/kubernetes-release/release/v1.15.0/bin/linux/amd64/kubectl
            sudo chmod +x ./kubectl
            sudo cp ./kubectl /bin/kubectl
            sudo apt-get update && sudo apt-get install -y jq
      - when: # NON_OIDC
          condition:
            equal:
              [false, << parameters.assume_role_with_web_identity_enabled >>]
          steps:
            - run:
                name: Restart deployment
                command: |
                  tokenResponse=$(aws sts assume-role \
                  --role-arn arn:aws:iam::$<<parameters.eks_account_id>>:role/$<<parameters.role_in_target_account>> \
                  --role-session-name AWSCLI-Session)

                  aws configure set aws_access_key_id \
                  $(echo $tokenResponse | jq -r .Credentials.AccessKeyId) \
                  --profile kubectl

                  aws configure set aws_secret_access_key \
                  $(echo $tokenResponse | jq -r .Credentials.SecretAccessKey) \
                  --profile kubectl

                  aws configure set aws_session_token \
                  $(echo $tokenResponse | jq -r .Credentials.SessionToken) \
                  --profile kubectl

                  aws --profile kubectl --region $<<parameters.aws_region>> \
                    eks update-kubeconfig \
                    --name $<<parameters.eks_cluster_name>> \
                    --role-arn arn:aws:iam::$<<parameters.eks_account_id>>:role/$<<parameters.role_in_target_account>>

                  echo 'export AWS_PROFILE=kubectl' >> $BASH_ENV
                  source $BASH_ENV

                  kubectl rollout restart deployment/<<parameters.deployment_name>> -n <<parameters.k8s_namespace>>
                  if [ "<<parameters.additional_deployment_name>>" ]; then
                    IFS=', ' read -r -a array \<<< "<<parameters.additional_deployment_name>>"
                    for additional_deployment in "${array[@]}"
                    do
                      kubectl rollout restart deployment/${additional_deployment} -n <<parameters.k8s_namespace>>
                    done
                  fi
      - when: # OIDC
          condition: << parameters.assume_role_with_web_identity_enabled >>
          steps:
            - run:
                name: Restart deployment
                command: |
                  echo "Establishing the OIDC session with account...${DEPLOYMENT_ACCOUNT_ID}..and the Role ${OIDC_ROLE}"
                  temp_role=$(aws sts assume-role-with-web-identity --role-arn "arn:aws:iam::${DEPLOYMENT_ACCOUNT_ID}:role/${OIDC_ROLE}" --role-session-name "web-identity-role-session" --web-identity-token "${CIRCLE_OIDC_TOKEN}")
                  AWS_ACCESS_KEY_ID=$(echo "${temp_role}" | jq .Credentials.AccessKeyId | xargs)
                  AWS_SECRET_ACCESS_KEY=$(echo "${temp_role}" | jq .Credentials.SecretAccessKey | xargs)
                  AWS_SESSION_TOKEN=$(echo "${temp_role}" | jq .Credentials.SessionToken | xargs)
                  AWS_REGION="$(echo "$AWS_REGION" | circleci env subst)"
                  aws configure set AWS_ACCESS_KEY_ID "${AWS_ACCESS_KEY_ID}" --profile "oidcsession"
                  aws configure set AWS_SECRET_ACCESS_KEY "${AWS_SECRET_ACCESS_KEY}" --profile "oidcsession"
                  aws configure set AWS_SESSION_TOKEN "${AWS_SESSION_TOKEN}" --profile "oidcsession"
                  aws configure set region "${AWS_REGION}" --profile "oidcsession"
                  echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
                  echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
                  echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
                  source $BASH_ENV
                  echo "OIDC session established"
                  tokenResponse=$(aws sts assume-role \
                  --role-arn arn:aws:iam::$<< parameters.eks_account_id >>:role/$<< parameters.role_in_target_account >> \
                  --role-session-name "AWSCLI-Session" --profile "oidcsession" --debug)
                  aws configure set aws_access_key_id \
                  $(echo $tokenResponse | jq -r .Credentials.AccessKeyId) \
                  --profile kubectl

                  aws configure set aws_secret_access_key \
                  $(echo $tokenResponse | jq -r .Credentials.SecretAccessKey) \
                  --profile kubectl

                  aws configure set aws_session_token \
                  $(echo $tokenResponse | jq -r .Credentials.SessionToken) \
                  --profile kubectl

                  aws --profile kubectl --region $<< parameters.aws_region >> \
                  eks update-kubeconfig \
                  --name $<< parameters.eks_cluster_name >> \
                  --role-arn arn:aws:iam::$<< parameters.eks_account_id >>:role/$<< parameters.role_in_target_account >>

                  echo 'export AWS_PROFILE=kubectl' >> $BASH_ENV
                  source $BASH_ENV

                  kubectl rollout restart deployment/<< parameters.deployment_name >> -n << parameters.k8s_namespace >>
                  if [ "<< parameters.additional_deployment_name >>" ]; then
                    IFS=', ' read -r -a array \<<< "<< parameters.additional_deployment_name >>"
                    for additional_deployment in "${array[@]}"
                    do
                      kubectl rollout restart deployment/${additional_deployment} -n << parameters.k8s_namespace >>
                    done
                  fi

examples:
  build-push-staging:
    description:
    usage:
      version: 2.1
      orbs:
        aws-ecr-eks: signavio/aws-ecr-eks@x.y
      workflows:
        version: 2
        aws-ecr-eks:
          jobs:
            - build-push:
                context: ECR
                repo: myecrrepo

  build-push-restart-staging:
    description:
    usage:
      version: 2.1
      orbs:
        aws-ecr-eks: signavio/aws-ecr-eks@x.y
      workflows:
        version: 2
        aws-ecr-eks:
          jobs:
            - build-push-restart:
                context: ECR
                repo: myecrrepo
                deployment_name: mydeployment
